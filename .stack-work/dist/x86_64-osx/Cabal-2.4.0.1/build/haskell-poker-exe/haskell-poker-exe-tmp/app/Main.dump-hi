
==================== FINAL INTERFACE ====================
2019-01-27 01:13:16.066624 UTC

interface main:Main 8063
  interface hash: 431bdcf65ea4cb7120456fe6038093d6
  ABI hash: 3f0d9bc1ae61f6578ee5709535214377
  export-list hash: d5adaea0e290927e0937da67e7cab3bc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1daaa5528253e7d1de2875c67c9ca04d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.newDeck
  Main.shuffledDeck
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0*
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-prim-0.5.3
                      haskell-poker-0.1.0.0 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
import  -/  base-4.12.0.0:Data.Tuple c92a835d04b6c075a7031d4e28e53c71
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.IO 7d8c7a747c93b42b043d691b66e1809e
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  haskell-poker-0.1.0.0:Lib e409ff8fe431116a37cf245ec089d4b0
import  -/  random-1.1:System.Random 83162b6ba3f01e6ded75da2550e6a825
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8ec299a35e15cff6535a2d1e0fba8325
  $wshowl ::
    [(Lib.Value, Lib.Suit)] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
e64847e27825e0251fcdd70a5f49b681
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
891e53fd879e450e0ec66860303a8554
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        (case ipv1 of ww { System.Random.StdGen ww1 ww2 ->
                         case System.Random.$w$cnext ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                         ww5 } })
                        ipv of s2# { DEFAULT ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    (GHC.Show.showList__
                       @ (Lib.Value, Lib.Suit)
                       Main.main2
                       (Lib.shuffle
                          @ System.Random.StdGen
                          System.Random.$fRandomGenStdGen
                          ipv1
                          Lib.makeDeck)
                       (GHC.Types.[] @ GHC.Types.Char))
                    GHC.Types.True)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   s2# } } }) -}
7a4c52047d2eb8699700272c3778cc95
  main2 ::
    (Lib.Value, Lib.Suit) -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>m2,
     Unfolding: (\ (w3 :: (Lib.Value, Lib.Suit))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Lib.$fShowValue_$cshow ww1)
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (\ (w2 :: GHC.Base.String)[OneShot] -> Lib.$w$cshowsPrec ww2 w2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
da440889feb094ded7e7515d6edc4aee
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
6363d83eb48418acf0400a856ac7e450
  newDeck :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr'
                   GHC.IO.Handle.FD.stdout
                   Main.newDeck1
                   GHC.Types.True) -}
dc83db8a114a9c7bfaa58fb296f66d1b
  newDeck1 :: GHC.Base.String
  {- Unfolding: (case Lib.makeDeck of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Lib.$fShowValue_$cshow ww1)
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.$fShow(,)2
                                       (case Main.$wshowl xs of ww4 { (#,#) ww5 ww6 ->
                                        GHC.Types.: @ GHC.Types.Char ww5 ww6 }))
                                    (\ (w2 :: GHC.Base.String)[OneShot] -> Lib.$w$cshowsPrec ww2 w2)
                                    (GHC.Types.[] @ GHC.Show.ShowS)))) }) }) -}
969f509d4515a603c6ca32179af9089b
  shuffledDeck :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

