
==================== FINAL INTERFACE ====================
2019-01-27 01:11:29.256553 UTC

interface main:Paths_haskell_poker 8063
  interface hash: b6f215e368cecebc77024c10b7cd4e81
  ABI hash: 71ad2f2e21b5c813e061888ce57e1e40
  export-list hash: 1f85a93d103fb099867699fdcdaaf316
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2e6d9898f10963781aba2127679710ff
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Paths_haskell_poker.getBinDir
  Paths_haskell_poker.getDataDir
  Paths_haskell_poker.getDataFileName
  Paths_haskell_poker.getDynLibDir
  Paths_haskell_poker.getLibDir
  Paths_haskell_poker.getLibexecDir
  Paths_haskell_poker.getSysconfDir
  Paths_haskell_poker.version
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Exception 9037ab3ff61dd8119bebad992e069fdd
import  -/  base-4.12.0.0:Data.Version f466d20c8aa84d587f46a948532be45a
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.IO edc9355d7dbab399fd5d385cd5bb457d
import  -/  base-4.12.0.0:GHC.IO.Exception 93698c4949c2bbf15fd7c864b5701916
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.Environment 2204870ad586be67c274aa49ce9ae53a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
addDependentFile "/Users/logan.lowder/.stack/programs/x86_64-osx/ghc-8.6.3/lib/ghc-8.6.3/include/ghcversion.h" c925484e8d952821bd47b962826e23d7
addDependentFile ".stack-work/dist/x86_64-osx/Cabal-2.4.0.1/build/haskell-poker-exe/autogen/cabal_macros.h" c71c62bd69c367ab37d8ffd50fdb97d3
76c7167838b7afd78bee0da4ce4ad82e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Paths_haskell_poker.$trModule3
                   Paths_haskell_poker.$trModule1) -}
47b8ad1a33a2d4b71722aa0813efe842
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Paths_haskell_poker.$trModule2) -}
e7ad6e09124c3741a998e308590d08c0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Paths_haskell_poker"#) -}
4c4dbb6e74e43d8d7eb378c079e07394
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Paths_haskell_poker.$trModule4) -}
adfcb5e157b25815c5e3375edf20cf72
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
364947057c139e2da54ef42bbe16b2f6
  getBinDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getBinDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
1c4472241e32b9fe31ebb92610fc6e02
  getBinDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getBinDir5
                   Paths_haskell_poker.getBinDir2
                   eta) -}
1b0747b9c8123d350afb7cae09f6f9a0
  getBinDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True -> (# eta, Paths_haskell_poker.getBinDir3 #) } }) -}
f8abcfd4f05b86e1416dadc9b10e1203
  getBinDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getBinDir4) -}
a5fcba10f9e5789b619e3a3ad75df8fb
  getBinDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/bin"#) -}
19b787e6abddde8335d3bb6e6e07f41d
  getBinDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getBinDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2 Paths_haskell_poker.getBinDir6 ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
7a2343bdc49a3fff783478ec089c6985
  getBinDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getBinDir7) -}
19ed051ae61af7d3e4e89fd02afde37c
  getBinDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_bindir"#) -}
ed37368137dee3d46a09bf50478110f1
  getDataDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getDataDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
947e06e5c1350332932a5dce370bd922
  getDataDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getDataDir5
                   Paths_haskell_poker.getDataDir2
                   eta) -}
9f3289a1867d055e09f7a7d056d0df84
  getDataDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_haskell_poker.getDataDir3 #) } }) -}
6a3e46479e7f6174803fc8d6b3ee5a2b
  getDataDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getDataDir4) -}
158f7379fb6c2dbdf9abe77f77204b96
  getDataDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/share/x86_64-osx-ghc-8.6.3/haskell-poker-0.1.0.0"#) -}
8cddfcc74a97a5a0e81a8b64fc7716e4
  getDataDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getDataDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2 Paths_haskell_poker.getDataDir6 ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
34a7dc452154f42a03f9371ca9fe8c6f
  getDataDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getDataDir7) -}
4a65cb493ee93c24659beaf8977bcd1c
  getDataDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_datadir"#) -}
3e81f24ea4fe95aed2d1374c60f4a6c4
  getDataFileName :: GHC.IO.FilePath -> GHC.Types.IO GHC.IO.FilePath
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getDataFileName1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)) -}
b349feb082300093ae47c242b3092a81
  getDataFileName1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (name :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.Type.SomeException
                        Paths_haskell_poker.getDataDir5
                        Paths_haskell_poker.getDataDir2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      (GHC.CString.unpackAppendCString#
                         Paths_haskell_poker.getDataFileName2
                         name) #) }) -}
e20885361736d88d49385ef67596d2f6
  getDataFileName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
e131d2d71c18be78f65e43605f725679
  getDynLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getDynLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
d189b93326f682afa7a0223caa094914
  getDynLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getDynLibDir5
                   Paths_haskell_poker.getDynLibDir2
                   eta) -}
16da890c5e1adb7e9ed5d87ccfebefa8
  getDynLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_haskell_poker.getDynLibDir3 #) } }) -}
c4e11a2e34bdf027c8c9ab1718856892
  getDynLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getDynLibDir4) -}
79d2374aedaefcfd92a3d65b1dbc6741
  getDynLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/lib/x86_64-osx-ghc-8.6.3"#) -}
97a6068f281371c20715df95a605831d
  getDynLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getDynLibDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2
                        Paths_haskell_poker.getDynLibDir6
                        ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
088aa8a208a7f563a5d5b62c0db632df
  getDynLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getDynLibDir7) -}
fba9d0c802811d8d3f07a92996d5469d
  getDynLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_dynlibdir"#) -}
03b084e6fbba5bd306a294f5f87d3b28
  getLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
17352a9bcd65caf2e068b42e3386b94b
  getLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getLibDir5
                   Paths_haskell_poker.getLibDir2
                   eta) -}
12d6f2c03f0b3467f46de1fd9bb2a42a
  getLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True -> (# eta, Paths_haskell_poker.getLibDir3 #) } }) -}
bea23206191667607a5313a6dcf32715
  getLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getLibDir4) -}
500a772939308e61c70b10aa19ff9d4f
  getLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/lib/x86_64-osx-ghc-8.6.3/haskell-poker-0.1.0.0-L03CXlG8KMIC485q12UrVY-haskell-poker-exe"#) -}
68d139db0d76c98c7586ba0f8cbb0d4c
  getLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getLibDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2 Paths_haskell_poker.getLibDir6 ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
4474cfa2ce0030e4573809d9226c910f
  getLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getLibDir7) -}
e24393a03113ea2ea7267dd33b2f9ae1
  getLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_libdir"#) -}
dcf7e49144c17d0c7927d981e4ed542b
  getLibexecDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getLibexecDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
3f71219ad4d6d1da2b17bc4f95cdc1fb
  getLibexecDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getLibexecDir5
                   Paths_haskell_poker.getLibexecDir2
                   eta) -}
b22b1b7c944428a2da87c46cdbf4d7b5
  getLibexecDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_haskell_poker.getLibexecDir3 #) } }) -}
7ba9480c0933e23b1a68a1cc06969333
  getLibexecDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getLibexecDir4) -}
c5dbc4e68125747755a10185dd43704a
  getLibexecDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/libexec/x86_64-osx-ghc-8.6.3/haskell-poker-0.1.0.0"#) -}
cebf0d05fb308461a95579244839b8d2
  getLibexecDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getLibexecDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2
                        Paths_haskell_poker.getLibexecDir6
                        ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
060dc5154ba8573bb2a654c895402d28
  getLibexecDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getLibexecDir7) -}
d1f6e0189a583e00dfb94a3a315720e5
  getLibexecDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_libexecdir"#) -}
4067d4a5488a39693b696543c7ae19ca
  getSysconfDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_haskell_poker.getSysconfDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
07cb613b4b5a4b85bb8a1f6beb2c616c
  getSysconfDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_haskell_poker.getSysconfDir5
                   Paths_haskell_poker.getSysconfDir2
                   eta) -}
4069e2e41664bca18ca0e6fd1500fd0f
  getSysconfDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_haskell_poker.getSysconfDir3 #) } }) -}
b2674394cd3e40d094e9cd723171a300
  getSysconfDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getSysconfDir4) -}
c963f24434418338d278bbc98771ddeb
  getSysconfDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/logan.lowder/workspace/haskell-practice/haskell-poker/.stack-work/install/x86_64-osx/lts-13.5/8.6.3/etc"#) -}
69cdd01d710c6438ddbce6e7ebb2e244
  getSysconfDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Maybe.Maybe GHC.Base.String)
                        ipv1
                        Paths_haskell_poker.getSysconfDir6
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Maybe.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Maybe.Nothing
                   -> System.Environment.getEnv2
                        Paths_haskell_poker.getSysconfDir6
                        ipv2
                   GHC.Maybe.Just x -> (# ipv2, x #) } } }) -}
9b265c9dead66d332ca69e148ba085d6
  getSysconfDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_haskell_poker.getSysconfDir7) -}
8cc3d96d59b0d3bda8ec3cbd60e944fa
  getSysconfDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("haskell_poker_sysconfdir"#) -}
416bd230270a61c482430546339dc399
  version :: Data.Version.Version
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Version.Version
                   Paths_haskell_poker.version1
                   (GHC.Types.[] @ GHC.Base.String)) -}
557bb30b4dc8d218e5a700bdd0e37151
  version1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_haskell_poker.version5
                   Paths_haskell_poker.version2) -}
0b3b31b9fdaca4dd8030f0c056ec5d77
  version2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_haskell_poker.version6
                   Paths_haskell_poker.version3) -}
3431f303dab1535950906eab9bb98a2d
  version3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_haskell_poker.version5
                   Paths_haskell_poker.version4) -}
601f2d935fb316add84fe0c6242c300b
  version4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_haskell_poker.version5
                   (GHC.Types.[] @ GHC.Types.Int)) -}
187985b267e10b53f6a8fc0f6477e191
  version5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ffc6eb3dc0c70a0e47b419448722116a
  version6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

